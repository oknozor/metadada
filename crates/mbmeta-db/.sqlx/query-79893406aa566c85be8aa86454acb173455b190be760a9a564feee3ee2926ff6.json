{
  "db_name": "PostgreSQL",
  "query": "SELECT\n  row_to_json(artist_data) as \"artist: Json<Vec<ArtistRow>>\"\n  FROM (\n    SELECT\n      artist.gid AS Id,\n      array(\n        SELECT gid\n          FROM artist_gid_redirect\n         WHERE artist_gid_redirect.new_id = artist.id\n      ) as OldIds,\n      artist.name as ArtistName,\n      artist.sort_name as SortName,\n      array(\n        SELECT name\n          FROM artist_alias\n         WHERE artist_alias.artist = artist.id\n           AND (artist_alias.type IS NULL OR artist_alias.type = 1)\n      ) as ArtistAliases,\n      CASE WHEN artist.ended THEN 'ended' ELSE 'active' END AS Status,\n      artist.comment as Disambiguation,\n      artist_type.name as Type,\n      json_build_object(\n        'Count', COALESCE(artist_meta.rating_count, 0),\n        'Value', artist_meta.rating::decimal / 10\n      ) AS Rating,\n      array(\n        SELECT url.url\n          FROM url\n                 JOIN l_artist_url ON l_artist_url.entity0 = artist.id AND l_artist_url.entity1 = url.id\n      ) AS Links,\n      array(\n        SELECT INITCAP(genre.name)\n          FROM genre\n                 JOIN tag ON genre.name = tag.name\n                 JOIN artist_tag ON artist_tag.tag = tag.id\n         WHERE artist_tag.artist = artist.id\n           AND artist_tag.count > 0\n      ) AS Genres\n      FROM artist\n             LEFT JOIN artist_type ON artist.type = artist_type.id\n             LEFT JOIN artist_meta ON artist.id = artist_meta.id\n     WHERE artist.gid = ANY($1::uuid[])\n  ) artist_data\n",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "artist: Json<Vec<ArtistRow>>",
        "type_info": "Json"
      }
    ],
    "parameters": {
      "Left": [
        "UuidArray"
      ]
    },
    "nullable": [
      null
    ]
  },
  "hash": "79893406aa566c85be8aa86454acb173455b190be760a9a564feee3ee2926ff6"
}
