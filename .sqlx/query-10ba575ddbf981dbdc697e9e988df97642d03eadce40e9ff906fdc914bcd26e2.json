{
  "db_name": "PostgreSQL",
  "query": "SELECT\n  json_agg(album_data) AS \"items: Json<Vec<Album>>\"\nFROM (\n  SELECT\n    release_group.gid AS Id,\n    array(\n      SELECT gid\n      FROM release_group_gid_redirect\n      WHERE release_group_gid_redirect.new_id = release_group.id\n    ) AS OldIds,\n    release_group.comment AS Disambiguation,\n    release_group.name AS Title,\n    artist.gid as ArtistId,\n    array(\n      SELECT DISTINCT artist.gid\n      FROM artist\n      JOIN artist_credit_name ON artist_credit_name.artist = artist.id\n      WHERE artist_credit_name.artist_credit = release_group.artist_credit\n        AND artist_credit_name.position = 0\n      UNION\n      SELECT DISTINCT artist.gid\n      FROM artist\n      JOIN artist_credit_name ON artist_credit_name.artist = artist.id\n      JOIN track ON track.artist_credit = artist_credit_name.artist_credit\n      JOIN medium ON track.medium = medium.id\n      JOIN release ON medium.release = release.id\n      WHERE release.release_group = release_group.id\n        AND artist_credit_name.position = 0\n    ) AS ArtistIds,\n    array(\n      SELECT name\n      FROM release_group_alias\n      WHERE release_group_alias.release_group = release_group.id\n        AND (release_group_alias.type IS NULL OR release_group_alias.type = 1)\n      UNION\n      SELECT release.name\n      FROM release\n      WHERE release.release_group = release_group.id\n        AND release.name != release_group.name\n    ) AS Aliases,\n    COALESCE(release_group_primary_type.name, 'Other') AS Type,\n    array(\n      SELECT name\n      FROM release_group_secondary_type rgst\n      JOIN release_group_secondary_type_join rgstj ON rgstj.secondary_type = rgst.id\n      WHERE rgstj.release_group = release_group.id\n      ORDER BY name ASC\n    ) AS SecondaryTypes,\n    COALESCE(\n      make_date(\n        release_group_meta.first_release_date_year,\n        release_group_meta.first_release_date_month,\n        release_group_meta.first_release_date_day\n      ),\n      make_date(\n        COALESCE(release_group_meta.first_release_date_year, 1),\n        COALESCE(release_group_meta.first_release_date_month, 1),\n        COALESCE(release_group_meta.first_release_date_day, 1)\n      )\n    ) AS ReleaseDate,\n    (\n      SELECT json_agg(row_to_json(artist_data))\n      FROM (\n        SELECT\n          artist.gid AS Id,\n          array(\n            SELECT gid\n            FROM artist_gid_redirect\n            WHERE artist_gid_redirect.new_id = artist.id\n          ) AS OldIds,\n          artist.name AS ArtistName,\n          artist.sort_name AS SortName,\n          array(\n            SELECT name\n            FROM artist_alias\n            WHERE artist_alias.artist = artist.id\n              AND (artist_alias.type IS NULL OR artist_alias.type = 1)\n          ) AS ArtistAliases,\n          CASE WHEN artist.ended THEN 'ended' ELSE 'active' END AS Status,\n          artist.comment AS Disambiguation,\n          artist_type.name AS Type,\n          json_build_object(\n            'Count', COALESCE(artist_meta.rating_count, 0),\n            'Value', artist_meta.rating::decimal / 10\n          ) AS Rating,\n          array(\n            SELECT url.url\n            FROM url\n            JOIN l_artist_url ON l_artist_url.entity0 = artist.id\n                              AND l_artist_url.entity1 = url.id\n          ) AS Links,\n          array(\n            SELECT INITCAP(genre.name)\n            FROM genre\n            JOIN tag ON genre.name = tag.name\n            JOIN artist_tag ON artist_tag.tag = tag.id\n            WHERE artist_tag.artist = artist.id\n              AND artist_tag.count > 0\n          ) AS Genres\n        FROM artist\n        LEFT JOIN artist_type ON artist.type = artist_type.id\n        LEFT JOIN artist_meta ON artist.id = artist_meta.id\n        WHERE artist.gid IN (\n          SELECT DISTINCT artist.gid\n          FROM artist\n          JOIN artist_credit_name ON artist_credit_name.artist = artist.id\n          JOIN track ON track.artist_credit = artist_credit_name.artist_credit\n          JOIN medium ON track.medium = medium.id\n          JOIN release ON medium.release = release.id\n          WHERE release.release_group = release_group.id\n            AND artist_credit_name.position = 0\n          UNION\n          SELECT artist.gid\n          FROM artist\n          JOIN artist_credit_name ON artist_credit_name.artist = artist.id\n          WHERE artist_credit_name.artist_credit = release_group.artist_credit\n            AND artist_credit_name.position = 0\n        )\n      ) artist_data\n    ) AS Artists,\n    json_build_object(\n      'Count', COALESCE(release_group_meta.rating_count, 0),\n      'Value', release_group_meta.rating::decimal / 10\n    ) AS Rating,\n    array(\n      SELECT url.url\n      FROM url\n      JOIN l_release_group_url ON l_release_group_url.entity0 = release_group.id\n                                AND l_release_group_url.entity1 = url.id\n    ) AS Links,\n    array(\n      SELECT INITCAP(genre.name)\n      FROM genre\n      JOIN tag ON genre.name = tag.name\n      JOIN release_group_tag ON release_group_tag.tag = tag.id\n      WHERE release_group_tag.release_group = release_group.id\n        AND release_group_tag.count > 0\n    ) AS Genres,\n    (\n      SELECT json_agg(row_to_json(images_data))\n      FROM (\n        SELECT unnest(types) AS type,\n               release.gid AS release_gid,\n               index_listing.id AS image_id\n        FROM cover_art_archive.index_listing\n        JOIN release ON index_listing.release = release.id\n        WHERE release.release_group = release_group.id\n        ORDER BY index_listing.ordering ASC\n      ) images_data\n    ) AS Images,\n    (\n      SELECT COALESCE(json_agg(row_to_json(releases_data)), '[]'::json)\n      FROM (\n        SELECT\n          release.gid AS Id,\n          array(\n            SELECT gid\n            FROM release_gid_redirect\n            WHERE release_gid_redirect.new_id = release.id\n          ) AS OldIds,\n          release.name AS Title,\n          release.comment AS Disambiguation,\n          release_status.name AS Status,\n          (\n            SELECT COALESCE(\n                     MIN(make_date(date_year, date_month, date_day)),\n                     MIN(make_date(COALESCE(date_year, 1), COALESCE(date_month, 1), COALESCE(date_day, 1)))\n                   )\n            FROM (\n              SELECT date_year, date_month, date_day\n              FROM release_country\n              WHERE release_country.release = release.id\n              UNION\n              SELECT date_year, date_month, date_day\n              FROM release_unknown_country\n              WHERE release_unknown_country.release = release.id\n            ) dates\n          ) AS ReleaseDate,\n          array(\n            SELECT name\n            FROM label\n            JOIN release_label ON release_label.label = label.id\n            WHERE release_label.release = release.id\n            ORDER BY name ASC\n          ) AS Label,\n          array(\n            SELECT name\n            FROM area\n            JOIN country_area ON country_area.area = area.id\n            JOIN release_country ON release_country.country = country_area.area\n            WHERE release_country.release = release.id\n          ) AS Country,\n          array(\n            SELECT json_build_object(\n              'Format', medium_format.name,\n              'Name', medium.name,\n              'Position', medium.position\n            )\n            FROM medium\n            JOIN medium_format ON medium_format.id = medium.format\n            WHERE medium.release = release.id\n            ORDER BY medium.position\n          ) AS Media,\n          (SELECT SUM(medium.track_count) FROM medium WHERE medium.release = release.id) AS TrackCount,\n          (\n            SELECT COALESCE(json_agg(row_to_json(track_data)), '[]'::json)\n            FROM (\n              SELECT\n                track.gid AS Id,\n                array(\n                  SELECT gid\n                  FROM track_gid_redirect\n                  WHERE track_gid_redirect.new_id = track.id\n                ) AS OldIds,\n                recording.gid AS RecordingId,\n                array(\n                  SELECT gid\n                  FROM recording_gid_redirect\n                  WHERE recording_gid_redirect.new_id = recording.id\n                ) AS OldRecordingIds,\n                artist.gid AS ArtistId,\n                track.name AS TrackName,\n                track.length AS DurationMs,\n                medium.position AS MediumNumber,\n                track.number AS TrackNumber,\n                track.position AS TrackPosition\n              FROM track\n              JOIN medium ON track.medium = medium.id\n              JOIN artist_credit_name ON artist_credit_name.artist_credit = track.artist_credit\n              JOIN artist ON artist_credit_name.artist = artist.id\n              JOIN recording ON track.recording = recording.id\n              WHERE medium.release = release.id\n                AND artist_credit_name.position = 0\n                AND recording.video = FALSE\n                AND track.is_data_track = FALSE\n            ) track_data\n          ) AS Tracks\n        FROM release\n        JOIN release_status ON release_status.id = release.status\n        WHERE release.release_group = release_group.id\n      ) releases_data\n    ) AS Releases\n  FROM release_group\n  LEFT JOIN release_group_meta ON release_group_meta.id = release_group.id\n  LEFT JOIN release_group_primary_type ON release_group.type = release_group_primary_type.id\n  LEFT JOIN artist_credit_name ON artist_credit_name.artist_credit = release_group.artist_credit\n  LEFT JOIN artist ON artist_credit_name.artist = artist.id\n  LEFT JOIN artist_type ON artist.type = artist_type.id\n  LEFT JOIN artist_meta ON artist.id = artist_meta.id\n  WHERE artist_credit_name.position = 0\n    AND release_group.gid > $1\n  ORDER BY release_group.gid\n  LIMIT $2\n) album_data;\n",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "items: Json<Vec<Album>>",
        "type_info": "Json"
      }
    ],
    "parameters": {
      "Left": [
        "Uuid",
        "Int8"
      ]
    },
    "nullable": [
      null
    ]
  },
  "hash": "10ba575ddbf981dbdc697e9e988df97642d03eadce40e9ff906fdc914bcd26e2"
}
